<templateSet group="security">
  <template name="gradle-security" value="implementation 'org.springframework.boot:spring-boot-starter-security'&#10;&#9;testImplementation 'org.springframework.security:spring-security-test'" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="config-class-security" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;@org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity&#10;public class SecurityConfig {&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    //authentication&#10;    public org.springframework.security.core.userdetails.UserDetailsService userDetailsService() {&#10;        //        UserDetails admin = User.withUsername(&quot;Basant&quot;)&#10;        //                .password(encoder.encode(&quot;Pwd1&quot;))&#10;        //                .roles(&quot;ADMIN&quot;)&#10;        //                .build();&#10;        //        UserDetails user = User.withUsername(&quot;John&quot;)&#10;        //                .password(encoder.encode(&quot;Pwd2&quot;))&#10;        //                .roles(&quot;USER&quot;,&quot;ADMIN&quot;,&quot;HR&quot;)&#10;        //                .build();&#10;        //        return new InMemoryUserDetailsManager(admin, user);&#10;        return new com.example.sample.UserInfoUserDetailsService();&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.web.SecurityFilterChain securityFilterChain(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        return http.csrf().disable()&#10;                .authorizeHttpRequests()&#10;                .requestMatchers(&quot;/products/welcome&quot;, &quot;/products/new&quot;).permitAll()&#10;                .and()&#10;                .authorizeHttpRequests().requestMatchers(&quot;/products/**&quot;)&#10;                .authenticated().and().formLogin().and().build();&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.crypto.password.PasswordEncoder passwordEncoder() {&#10;        return new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder();&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.authentication.AuthenticationProvider authenticationProvider() {&#10;        org.springframework.security.authentication.dao.DaoAuthenticationProvider authenticationProvider = new org.springframework.security.authentication.dao.DaoAuthenticationProvider();&#10;        authenticationProvider.setUserDetailsService(userDetailsService());&#10;        authenticationProvider.setPasswordEncoder(passwordEncoder());&#10;        return authenticationProvider;&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="model-product" value="@lombok.Data&#10;@lombok.AllArgsConstructor&#10;@lombok.NoArgsConstructor&#10;@lombok.Builder&#10;public class Product {&#10;&#10;    private int productId;&#10;    private java.lang.String name;&#10;    private int qty;&#10;    private double price;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="controller-product" value="@org.springframework.web.bind.annotation.RestController&#10;@org.springframework.web.bind.annotation.RequestMapping(&quot;/products&quot;)&#10;public class ProductController {&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private com.example.sample.ProductService service;&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/welcome&quot;)&#10;    public java.lang.String welcome() {&#10;        return &quot;Welcome this endpoint is not secure&quot;;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.PostMapping(&quot;/new&quot;)&#10;    public java.lang.String addNewUser(@org.springframework.web.bind.annotation.RequestBody com.example.sample.UserInfo userInfo) {&#10;        return service.addUser(userInfo);&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/all&quot;)&#10;    @org.springframework.security.access.prepost.PreAuthorize(&quot;hasAuthority('ROLE_ADMIN')&quot;)&#10;    public java.util.List&lt;Product&gt; getAllTheProducts() {&#10;        return service.getProducts();&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/{id}&quot;)&#10;    @org.springframework.security.access.prepost.PreAuthorize(&quot;hasAuthority('ROLE_USER')&quot;)&#10;    public Product getProductById(@org.springframework.web.bind.annotation.PathVariable int id) {&#10;        return service.getProduct(id);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="service-product" value="@org.springframework.stereotype.Service&#10;public class ProductService {&#10;&#10;    java.util.List&lt;Product&gt; productList = null;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private com.example.sample.UserInfoRepository repository;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private org.springframework.security.crypto.password.PasswordEncoder passwordEncoder;&#10;&#10;    @jakarta.annotation.PostConstruct&#10;    public void loadProductsFromDB() {&#10;        productList = java.util.stream.IntStream.rangeClosed(1, 100)&#10;                .mapToObj(i -&gt; Product.builder()&#10;                        .productId(i)&#10;                        .name(&quot;product &quot; + i)&#10;                        .qty(new java.util.Random().nextInt(10))&#10;                        .price(new java.util.Random().nextInt(5000)).build()&#10;                ).collect(java.util.stream.Collectors.toList());&#10;    }&#10;&#10;&#10;    public java.util.List&lt;Product&gt; getProducts() {&#10;        return productList;&#10;    }&#10;&#10;    public Product getProduct(int id) {&#10;        return productList.stream()&#10;                .filter(product -&gt; product.getProductId() == id)&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new java.lang.RuntimeException(&quot;product &quot; + id + &quot; not found&quot;));&#10;    }&#10;&#10;&#10;    public java.lang.String addUser(com.example.sample.UserInfo userInfo) {&#10;        userInfo.setPassword(passwordEncoder.encode(userInfo.getPassword()));&#10;        repository.save(userInfo);&#10;        return &quot;user added to system &quot;;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="entity-user-info" value="@jakarta.persistence.Entity&#10;@lombok.Data&#10;@lombok.AllArgsConstructor&#10;@lombok.NoArgsConstructor&#10;public class UserInfo {&#10;    @jakarta.persistence.Id&#10;    @jakarta.persistence.GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)&#10;    private int id;&#10;    private java.lang.String name;&#10;    private java.lang.String email;&#10;    private java.lang.String password;&#10;    private java.lang.String roles;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="repo-user-info" value="public interface UserInfoRepository extends org.springframework.data.jpa.repository.JpaRepository&lt;UserInfo, java.lang.Integer&gt; {&#10;    java.util.Optional&lt;UserInfo&gt; findByName(java.lang.String username);&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="user-detail-user-info" value="public class UserInfoUserDetails implements org.springframework.security.core.userdetails.UserDetails {&#10;&#10;&#10;    private final java.lang.String name;&#10;    private final java.lang.String password;&#10;    private final java.util.List&lt;org.springframework.security.core.GrantedAuthority&gt; authorities;&#10;&#10;    public UserInfoUserDetails(UserInfo userInfo) {&#10;        name = userInfo.getName();&#10;        password = userInfo.getPassword();&#10;        authorities = java.util.Arrays.stream(userInfo.getRoles().split(&quot;,&quot;))&#10;                .map(org.springframework.security.core.authority.SimpleGrantedAuthority::new)&#10;                .collect(java.util.stream.Collectors.toList());&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.util.Collection&lt;? extends org.springframework.security.core.GrantedAuthority&gt; getAuthorities() {&#10;        return authorities;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String getUsername() {&#10;        return name;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isAccountNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isAccountNonLocked() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isCredentialsNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean isEnabled() {&#10;        return true;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="user-detail-service-user-info" value="@org.springframework.stereotype.Component&#10;public class UserInfoUserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private UserInfoRepository repository;&#10;&#10;    @java.lang.Override&#10;    public org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String username) throws org.springframework.security.core.userdetails.UsernameNotFoundException {&#10;        java.util.Optional&lt;UserInfo&gt; userInfo = repository.findByName(username);&#10;        return userInfo.map(UserInfoUserDetails::new)&#10;                .orElseThrow(() -&gt; new org.springframework.security.core.userdetails.UsernameNotFoundException(&quot;user not found &quot; + username));&#10;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="algo-security" value="- algo-security&#10;- gradle&#10;    - jpa: for crud operations&#10;    - mysql connector: for creating bridge b/w java app &amp; mysql&#10;    - lombok: for pojo simplification&#10;    - web: for rest controller&#10;    - security: for security in app&#10;- model-product&#10;- entity-user-info&#10;- repo-userinfo&#10;- service-product&#10;- controller-product&#10;- user-detail-userinfo&#10;- user-detail-service-user-info&#10;- bean-security&#10;- yml&#10;    - db yml&#10;    - show sql yml&#10;    - ddl auto update yml" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="Properties" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
    </context>
  </template>
</templateSet>