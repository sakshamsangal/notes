<templateSet group="user">
  <template name="lombok" value="compileOnly 'org.projectlombok:lombok'&#10;annotationProcessor 'org.projectlombok:lombok'" description="lombok" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="devtools" value="developmentOnly 'org.springframework.boot:spring-boot-devtools'" description="devtools" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="web" value="implementation 'org.springframework.boot:spring-boot-starter-web'" description="web" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="aop" value="implementation 'org.springframework.boot:spring-boot-starter-aop'" description="aop" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="port" value="server:&#10;  port: 8080" description="port" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="PUML" value="false" />
      <option name="Properties" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
    </context>
  </template>
  <template name="webflux" value="implementation 'org.springframework.boot:spring-boot-starter-webflux'&#10;&#9;testImplementation 'io.projectreactor:reactor-test'" description="webflux" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="exp handler" value="package com.example.demo.exception;&#10;import com.example.demo.dto.APIErrorResponse;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.ResponseStatus;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@org.springframework.web.bind.annotation.RestControllerAdvice&#10;public class ApplicationExceptionHandler {&#10;&#10;&#10;    @org.springframework.web.bind.annotation.ResponseStatus(org.springframework.http.HttpStatus.BAD_REQUEST)&#10;    @org.springframework.web.bind.annotation.ExceptionHandler(org.springframework.web.bind.MethodArgumentNotValidException.class)&#10;    public java.util.Map&lt;java.lang.String, java.lang.String&gt; handleInvalidArgument(org.springframework.web.bind.MethodArgumentNotValidException ex) {&#10;        java.util.Map&lt;java.lang.String, java.lang.String&gt; errorMap = new java.util.HashMap&lt;&gt;();&#10;        ex.getBindingResult().getFieldErrors().forEach(error -&gt; {&#10;            errorMap.put(error.getField(), error.getDefaultMessage());&#10;        });&#10;        return errorMap;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.ResponseStatus(org.springframework.http.HttpStatus.NOT_FOUND)&#10;    @org.springframework.web.bind.annotation.ExceptionHandler(com.example.demo.exception.UserNotFoundException.class)&#10;    public com.example.demo.dto.APIErrorResponse handleUserNotFoundException(com.example.demo.exception.UserNotFoundException ex) {&#10;        return new com.example.demo.dto.APIErrorResponse(ex.getMessage());&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="usernfe" value="package com.example.demo.exception;&#10;&#10;public class UserNotFoundException extends java.lang.RuntimeException {&#10;    public UserNotFoundException(java.lang.String message) {&#10;        super(message);&#10;    }&#10;}" description="usernfe" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="delbyid" value="@java.lang.Override&#10;    public void deleteById(int id) {&#10;        java.util.Optional&lt;com.example.demo.entity.User&gt; user = userRepository.findById(id);&#10;        if (user.isPresent()) {&#10;            userRepository.deleteById(id);&#10;        } else {&#10;            throw new com.example.demo.exception.UserNotFoundException(&quot;User not present with id = &quot; + id);&#10;        }&#10;    }" description="delbyid" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="getAPIExpose" value="@org.springframework.web.bind.annotation.GetMapping(&quot;/customHeader&quot;)&#10;    org.springframework.http.ResponseEntity&lt;java.lang.String&gt; age(@org.springframework.web.bind.annotation.RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) {&#10;        return org.springframework.http.ResponseEntity.ok()&#10;                .header(&quot;Custom-Header&quot;, &quot;foo&quot;)&#10;                .body(&quot;Custom header set&quot;);&#10;    }" description="getAPIExpose" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>